# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      # CC_TEST_REPORTER_ID not a secret, safe to expose
      - image: circleci/python:3.6.1
        environment:
          CC_TEST_REPORTER_ID: a32b3765902547bc67e317bbb1653930661e57cdd1eff029fc53f2727c601169

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install -r requirements_dev.txt
            pip install .

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: prepare coverage reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build

      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            py.test --cov=clone_army --cov-report=xml tests

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - run:
          name: report coverage
          command: |
            ./cc-test-reporter after-build -t coverage.py --exit-code $?


